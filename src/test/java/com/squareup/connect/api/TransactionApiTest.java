/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.api;

import com.squareup.connect.ApiException;
import com.squareup.connect.models.CaptureTransactionResponse;
import com.squareup.connect.models.ChargeRequest;
import com.squareup.connect.models.ChargeResponse;
import com.squareup.connect.models.ListTransactionsResponse;
import com.squareup.connect.models.RetrieveTransactionResponse;
import com.squareup.connect.models.VoidTransactionResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionApi
 */
@Ignore
public class TransactionApiTest {

    private final TransactionApi api = new TransactionApi();

    
    /**
     * CaptureTransaction
     *
     * Captures a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void captureTransactionTest() throws ApiException {
        String authorization = null;
        String locationId = null;
        String transactionId = null;
        CaptureTransactionResponse response = api.captureTransaction(authorization, locationId, transactionId);

        // TODO: test validations
    }
    
    /**
     * Charge
     *
     * Charges a card represented by a card nonce or a customer&#39;s card on file.  Your request to this endpoint must include _either_:  - A value for the &#x60;card_nonce&#x60; parameter (to charge a card nonce generated with the &#x60;SqPaymentForm&#x60;) - Values for the &#x60;customer_card_id&#x60; and &#x60;customer_id&#x60; parameters (to charge a customer&#39;s card on file)  In order for an e-commerce payment to potentially qualify for [Square chargeback protection](https://squareup.com/help/article/5394), you _must_ provide values for the following parameters in your request:  - &#x60;buyer_email_address&#x60; - At least one of &#x60;billing_address&#x60; or &#x60;shipping_address&#x60;  When this response is returned, the amount of Square&#39;s processing fee might not yet be calculated. To obtain the processing fee, wait about ten seconds and call [RetrieveTransaction](#endpoint-retrievetransaction). See the &#x60;processing_fee_money&#x60; field of each [Tender included](#type-tender) in the transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void chargeTest() throws ApiException {
        String authorization = null;
        String locationId = null;
        ChargeRequest body = null;
        ChargeResponse response = api.charge(authorization, locationId, body);

        // TODO: test validations
    }
    
    /**
     * ListTransactions
     *
     * Lists transactions for a particular location.  Max results per [page](#paginatingresults): 50
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String authorization = null;
        String locationId = null;
        String beginTime = null;
        String endTime = null;
        String sortOrder = null;
        String cursor = null;
        ListTransactionsResponse response = api.listTransactions(authorization, locationId, beginTime, endTime, sortOrder, cursor);

        // TODO: test validations
    }
    
    /**
     * RetrieveTransaction
     *
     * Retrieves details for a single transaction.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveTransactionTest() throws ApiException {
        String authorization = null;
        String locationId = null;
        String transactionId = null;
        RetrieveTransactionResponse response = api.retrieveTransaction(authorization, locationId, transactionId);

        // TODO: test validations
    }
    
    /**
     * VoidTransaction
     *
     * Cancels a transaction that was created with the [Charge](#endpoint-charge) endpoint with a &#x60;delay_capture&#x60; value of &#x60;true&#x60;.  See [Delayed capture transactions](/articles/delayed-capture-transactions/) for more information.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void voidTransactionTest() throws ApiException {
        String authorization = null;
        String locationId = null;
        String transactionId = null;
        VoidTransactionResponse response = api.voidTransaction(authorization, locationId, transactionId);

        // TODO: test validations
    }
    
}
