/*
 * Square Connect API
 * Client library for accessing the Square Connect APIs
 *
 * OpenAPI spec version: 2.0
 * Contact: developers@squareup.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.squareup.connect.api;

import com.squareup.connect.ApiException;
import com.squareup.connect.models.CreateCustomerRequest;
import com.squareup.connect.models.CreateCustomerResponse;
import com.squareup.connect.models.DeleteCustomerResponse;
import com.squareup.connect.models.ListCustomersResponse;
import com.squareup.connect.models.RetrieveCustomerResponse;
import com.squareup.connect.models.UpdateCustomerRequest;
import com.squareup.connect.models.UpdateCustomerResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CustomerApi
 */
@Ignore
public class CustomerApiTest {

    private final CustomerApi api = new CustomerApi();

    
    /**
     * CreateCustomer
     *
     * Creates a new customer for a business, which can have associated cards on file.  You must provide __at least one__ of the following values in your request to this endpoint:  - &#x60;given_name&#x60; - &#x60;family_name&#x60; - &#x60;company_name&#x60; - &#x60;email_address&#x60; - &#x60;phone_number&#x60;  This endpoint does not accept an idempotency key. If you accidentally create a duplicate customer, you can delete it with the [DeleteCustomer](#endpoint-deletecustomer) endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createCustomerTest() throws ApiException {
        String authorization = null;
        CreateCustomerRequest body = null;
        CreateCustomerResponse response = api.createCustomer(authorization, body);

        // TODO: test validations
    }
    
    /**
     * DeleteCustomer
     *
     * Deletes a customer from a business, along with any linked cards on file.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deleteCustomerTest() throws ApiException {
        String authorization = null;
        String customerId = null;
        DeleteCustomerResponse response = api.deleteCustomer(authorization, customerId);

        // TODO: test validations
    }
    
    /**
     * ListCustomers
     *
     * Lists a business&#39;s customers.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void listCustomersTest() throws ApiException {
        String authorization = null;
        String cursor = null;
        ListCustomersResponse response = api.listCustomers(authorization, cursor);

        // TODO: test validations
    }
    
    /**
     * RetrieveCustomer
     *
     * Returns details for a single customer.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void retrieveCustomerTest() throws ApiException {
        String authorization = null;
        String customerId = null;
        RetrieveCustomerResponse response = api.retrieveCustomer(authorization, customerId);

        // TODO: test validations
    }
    
    /**
     * UpdateCustomer
     *
     * Updates the details of an existing customer.  You cannot edit a customer&#39;s cards on file with this endpoint. To make changes to a card on file, you must delete the existing card on file with the [DeleteCustomerCard](#endpoint-deletecustomercard) endpoint, then create a new one with the [CreateCustomerCard](#endpoint-createcustomercard) endpoint.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateCustomerTest() throws ApiException {
        String authorization = null;
        String customerId = null;
        UpdateCustomerRequest body = null;
        UpdateCustomerResponse response = api.updateCustomer(authorization, customerId, body);

        // TODO: test validations
    }
    
}
